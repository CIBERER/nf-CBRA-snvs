nextflow_workflow {

    name "Test Subworkflow VCF_MERGE_VARIANTCALLERS"
    script "../main.nf"
    workflow "VCF_MERGE_VARIANTCALLERS"

    tag "subworkflows"
    tag "subworkflows/vcf_merge_variantcallers"


   setup {

        run("BWA_INDEX") {
            script "../../../../modules/nf-core/bwa/index/main.nf"
            process {
                """
                input[0] = [
                    [ id: 'genome'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }
        run("PICARD_CREATESEQUENCEDICTIONARY") {
            script "../../../../modules/nf-core/picard/createsequencedictionary/main.nf"
            process {
                """
                input[0] = [
                    [ id: 'genome'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }
        run("MAPPING") {
            script "../../../../subworkflows/local/mapping/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id : 'test_sample' ],
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test.umi_1.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test.umi_2.fastq.gz', checkIfExists: true)]
                ])
                input[1] =  Channel.fromList([
                            tuple([ id: 'test_sample'],
                            [])
                        ])
                input[2] = BWA_INDEX.out.index
                input[3] =  Channel.fromList([
                        tuple([ id: 'genome'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true))
                    ])
                input[4] =  Channel.fromList([
                        tuple([ id: 'genome'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true))
                    ])
                input[5] = PICARD_CREATESEQUENCEDICTIONARY.out.reference_dict
                input[6] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/vcf/dbsnp_146.hg38.vcf.gz', checkIfExists: true)
                input[7] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/vcf/dbsnp_146.hg38.vcf.gz.tbi', checkIfExists: true)
                """
            }
        }

        run("GATK_VCF") {
            script "../../../../subworkflows/local/gatk_vcf/main.nf"
            process {
                """
                input[0] = MAPPING.out.bam
                input[1] =  Channel.fromList([
                        tuple([ id: 'test_sample'],
                        [])
                    ])
                input[2] =  Channel.fromList([
                        tuple([ id: 'genome'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true))
                    ])
                input[3] =  Channel.fromList([
                        tuple([ id: 'genome'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true))
                    ])
                input[4] = PICARD_CREATESEQUENCEDICTIONARY.out.reference_dict
                input[5] = input[5] =  Channel.fromList([
                            tuple([ id: 'test_dbsnp'],
                            [])
                        ])
                input[6] = input[5] =  Channel.fromList([
                            tuple([ id: 'test_dbsnp'],
                            [])
                        ])
                """
            }
        }

        run("GATK4_COMPOSESTRTABLEFILE") {
            script "../../../../modules/nf-core/gatk4/composestrtablefile/main.nf"
            process {
                """
                input[0] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists: true)
                """
            }
        }

        run("DRAGEN_VCF") {
            script "../../../../subworkflows/local/dragen_vcf/main.nf"
            process {
                 """
                input[0] = MAPPING.out.bam
                input[1] = Channel.fromList([
                        tuple([ id: 'genome'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true))
                ])
                input[2] =  Channel.fromList([
                    tuple([ id: 'genome'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true))
                    ])
                input[3] = Channel.fromList([
                    tuple([ id: 'genome'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists: true))
                ])
                input[4] = GATK4_COMPOSESTRTABLEFILE.out.str_table
                input[5] =  Channel.fromList([
                        tuple([ id: 'test_sample'],
                        [])
                    ])                
                input[6] = Channel.fromList([
                            tuple([ id: 'test_dbsnp'],
                            [])
                        ])
                input[7] = Channel.fromList([
                            tuple([ id: 'test_dbsnp'],
                            [])
                        ])                
                """
            }
        }


    }


    test("vcf_merge_variantcallers - vcf ") {


        when {
            workflow {
                """
                input[0] = GATK_VCF.out.vcf.map { meta, vcf, tbi -> [meta + [program:"gatk"], vcf, tbi] }.concat(
                    DRAGEN_VCF.out.vcf.map { meta, vcf, tbi -> [meta + [program:"dragen"], vcf, tbi] }
                )
                input[1] =  Channel.fromList([
                        tuple([ id: 'genome'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true))
                    ])
                input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                input[3] =  Channel.fromList([
                        tuple([ id: 'test_sample'],
                        [])
                    ])    
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }

}
