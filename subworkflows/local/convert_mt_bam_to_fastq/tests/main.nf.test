nextflow_workflow {

    name "Test Subworkflow convert_mt_bam_to_fastq"
    script "../main.nf"
    workflow "CONVERT_MT_BAM_TO_FASTQ"

    tag "subworkflows"
    tag "subworkflows/convert_mt_bam_to_fastq"
    tag "subworkflows/mapping"
    tag "bwa"
    tag "bwa/mem"
    tag "gatk4"
    tag "gatk4/printreads"
    tag "gatk4/revertsam"
    tag "gatk4/samtofastq"
    tag "picard"
    tag "picard/sortsam"


    setup {

        run("BWA_INDEX") {
            script "../../../../modules/nf-core/bwa/index/main.nf"
            process {
                """
                input[0] = [
                    [ id: 'references_hg38_v0_chrM_Homo_sapiens_assembly38.chrM.fasta'],
                    file('/mnt/genetica7/references_chrM/chrM_hg38/references_hg38_v0_chrM_Homo_sapiens_assembly38.chrM.fasta', checkIfExists: true)
                ]
                """
            }
        }

        run("PICARD_CREATESEQUENCEDICTIONARY") {
            script "../../../../modules/nf-core/picard/createsequencedictionary/main.nf"
            process {
                """
                input[0] = [
                    [ id: 'references_hg38_v0_chrM_Homo_sapiens_assembly38.chrM.fasta'],
                    file('/mnt/genetica7/references_chrM/chrM_hg38/references_hg38_v0_chrM_Homo_sapiens_assembly38.chrM.fasta', checkIfExists: true)
                ]
                """
            }
        }

        run("MAPPING") {
            script "../../../../subworkflows/local/mapping/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id : 'test_sample' ],
                    [file('ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR770/005/SRR7700725/SRR7700725_1.fastq.gz', checkIfExists: true),
                    file('ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR770/005/SRR7700725/SRR7700725_2.fastq.gz', checkIfExists: true)]
                ])
                input[1] =  Channel.fromList([
                            tuple([ id: 'test_sample'],
                            [])
                        ])
                input[2] = BWA_INDEX.out.index
                input[3] =  Channel.fromList([
                        tuple([ id: 'references_hg38_v0_chrM_Homo_sapiens_assembly38.chrM.fasta'],
                        file('/mnt/genetica7/references_chrM/chrM_hg38/references_hg38_v0_chrM_Homo_sapiens_assembly38.chrM.fasta', checkIfExists: true))
                    ])
                input[4] =  Channel.fromList([
                        tuple([ id: 'references_hg38_v0_chrM_Homo_sapiens_assembly38.chrM.fasta'],
                        file('/mnt/genetica7/references_chrM/chrM_hg38/references_hg38_v0_chrM_Homo_sapiens_assembly38.chrM.fasta.fai', checkIfExists: true))
                    ])
                input[5] = PICARD_CREATESEQUENCEDICTIONARY.out.reference_dict
                input[6] = Channel.empty()
                input[7] = Channel.empty()
                """
            }
        }
    }

    test("convert_mt_bam_to_fastq - bam") {


        when {
            workflow {
                """
                println "Starting workflow execution"
                
                input[0] = MAPPING.out.bam
                println "Input[0] (BAM) set: \${input[0]}"
                
                input[1] = Channel.fromList([
                    tuple([ id: 'references_hg38_v0_chrM_Homo_sapiens_assembly38.chrM.fasta'],
                    file('/mnt/genetica7/references_chrM/chrM_hg38/references_hg38_v0_chrM_Homo_sapiens_assembly38.chrM.fasta', checkIfExists: true))
                ])
                println "Input[1] (Reference FASTA) set: \${input[1]}"
                
                input[2] = Channel.fromList([
                    tuple([ id: 'references_hg38_v0_chrM_Homo_sapiens_assembly38.chrM.fasta'],
                    file('/mnt/genetica7/references_chrM/chrM_hg38/references_hg38_v0_chrM_Homo_sapiens_assembly38.chrM.fasta.fai', checkIfExists: true))
                ])
                println "Input[2] (Reference FAI) set: \${input[2]}"
                
                input[3] = PICARD_CREATESEQUENCEDICTIONARY.out.reference_dict
                println "Input[3] (Reference Dict) set: \${input[3]}"
                
                println "All inputs set, ready to execute workflow"
                """
            }
        }

        then {
            println "Workflow execution completed"
            println "Workflow success: \${workflow.success}"
            println "Number of executed tasks: \${workflow.trace.tasks().size()}"
            println "Workflow output: \${workflow.out}"
            
            assert workflow.success
            assert workflow.trace.tasks().size() > 0
            assert snapshot(workflow.out).match()
        }
    }

}
